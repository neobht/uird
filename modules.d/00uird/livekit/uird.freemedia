#!/bin/bash
# Author: Alexander Betkher <http://magos-linux.ru>
# Author: Anton Goroshkin <http://magos-linux.ru>
uird_freemedia() {
	local UUID MPOINT MNTOPTS RBIND part PARS devices devs swaps
	FREEMEDIA_BEGIN=$($GETTEXT "Starting freemedia....")
	MEDIA=$($GETTEXT "Media")
	NOTFREE=$($GETTEXT "is not free")
	RULES=$($GETTEXT "add the udev rules to remount sources")
	CANT_UNMOUNT=$($GETTEXT "Can't unmount")
	PARS="$(getpar $UIRD_FREEMEDIA)"
	move_run
	echo_green_star && echolog "$FREEMEDIA_BEGIN"
	LOSETUP=""
	BINDIR="${UNION}/run/bin"
	mkdir -p $BINDIR
	RULESDIR="${UNION}/run/udev/rules.d"
	mkdir -p $RULESDIR
	devs=''
	swaps=''
	mapper_devs=''
	if [ "$PARS" == "enabled" ]; then
		mapper_devs=$(tac /proc/mounts | grep '/dev/mapper' | cut -d " " -f2)
		devs=$(grep -E '/dev/sd.*[[:digit:]]' /proc/mounts | cut -d " " -f1 | sort -u)
		swaps=$(grep -E '/dev/sd.*[[:digit:]]' /proc/swaps | cut -d " " -f1)
	else
		for a in $PARS; do
			par=$(getpar $UIRD_FREEMEDIA $a 1 | sed 's/[[:digit:]].*//')
			part=$(grep "$par" /proc/mounts | cut -d " " -f 1 | sort -u)
			devs="${devs}\n${part}"
			swap=$(grep "$par" /proc/swaps | cut -d " " -f 1 | sort -u)
			swaps="${swaps}\n${swap}"
		done
	fi
	swapparts=$(echo -e $swaps | sort -u)
	for s in $swapparts; do swapoff $s; done
	if [ -n "$mapper_devs" ]; then
		for mdev in $mapper_devs; do
			umount $mdev
			[ $? != 0 ] && echolog "Error umounting $mdev"
		done
		for mdev in $(ls -1 /dev/mapper); do
			[ "$mdev" == 'control' ] && continue
			cryptsetup luksClose $mdev
			[ $? != 0 ] && echolog "Error cryptsetup luksClose $mdev"
		done
	fi
	devices=$(echo -e $devs | sort -u)
	echo "freemedia_devices="$(echo "$devices" | tr '\n' ' ' | sed -e 's/ /,/g' -e 's/^,//' -e 's/,$//') >>$UNION/etc/initvars
	for dev in $devices; do
		unset LOSETUP
		unset LOOP
		unset LOOP_FILE
		UUID=$($BIN_BLKID -s UUID | grep $dev | cut -d " " -f 2 | cut -d "\"" -f2)
		SERIAL_ID=$(udevadm info -a -n $dev | grep "ATTRS{device}" | head -n1)
		MNTOPTS=$(grep $dev /proc/mounts | head -n1 | cut -d " " -f 4)
		RBIND=$(grep $dev /proc/self/mountinfo | sed 1d | awk '{print $4 "," $5}')
		for mountstr in $RBIND; do
			unmnt=$(echo $mountstr | cut -d "," -f2)
			LOOP=$($BIN_LOSETUP | grep $unmnt | cut -d " " -f 1)
			LOOP_FILE=$($BIN_LOSETUP | grep $unmnt | awk '{print $6}')
			[ "$LOOP" ] && $BIN_LOSETUP -d "$LOOP" 2>/dev/null && LOSETUP=$LOOP_FILE
			umount $unmnt 2>/dev/null || echolog "$CANT_UNMOUNT $unmnt"
		done
		MPOINT=$(grep $dev /proc/self/mountinfo | head -n1 | grep ".* / .*$dev" | cut -d " " -f 5)
		LOOP=$($BIN_LOSETUP | grep $MPOINT | cut -d " " -f 1) 2>/dev/null
		LOOP_FILE=$($BIN_LOSETUP | grep $MPOINT | awk '{print $6}')
		[ $LOOP ] && $BIN_LOSETUP -d $LOOP && LOSETUP=$LOOP_FILE
		umount $dev 2>/dev/null
		if [ $? -eq 0 ]; then
			eject $dev 2>/dev/null #may be cdrom
			log "generate remount scripts to $dev"
			echo "#!/bin/bash" >$BINDIR/remount_$UUID
			echo "systemctl status systemd-logind.service || exit " >>$BINDIR/remount_$UUID
			echo "sleep 3" >>$BINDIR/remount_$UUID
			echo "mkdir -p $MPOINT" >>$BINDIR/remount_$UUID
			echo "mount  -o $MNTOPTS  --uuid $UUID  $MPOINT" >>$BINDIR/remount_$UUID
			for mountstr in $RBIND; do
				mpoint=$(echo $mountstr | cut -d "," -f2 | sed 's:^/sysroot::')
				echo "mkdir -p $mpoint" >>$BINDIR/remount_$UUID
				echo "mount --rbind $MPOINT$(echo $mountstr | cut -d "," -f1) " $mpoint >>$BINDIR/remount_$UUID
			done
			[ $LOSETUP ] && echo "losetup '$(losetup -f)'  $(echo "$LOSETUP" | sed 's:^/sysroot::')" >>$BINDIR/remount_$UUID
			echo '[ -x /run/initrumfs/remount ] && /run/initrumfs/remount' >>$BINDIR/remount_$UUID
			echo '' >>$BINDIR/remount_$UUID
			chmod +x $BINDIR/remount_$UUID
			echo "KERNEL==\"sd?\",  $SERIAL_ID,  ACTION==\"add\", RUN+=\"/run/bin/remount_$UUID \"" >${RULESDIR}/00-${UUID}.rules
		fi
	done
	for device in $(echo $devs | while read a; do echo $a | cut -c 1-8; done | sort | uniq); do
		cat /proc/mounts | grep -q $device && notfree="$notfree $device"
	done

	if [ "$notfree" ]; then
		echo -e "${MEDIA}:" $red"$notfree"$default "${NOTFREE}:"
		echo -ne $yellow"(S)hutdown, (R)eboot, (C)ontinue, Shell (default)"$default" "
		read ASK
		case "$ASK" in
		"S" | "s")
			#shutdown
			poweroff -f
			;;
		"R" | "r")
			#reboot
			reboot -f
			;;
		"C" | "c")
			#continue
			;;
		*)
			#else - SHELL
			shell_cmd "shell"
			;;
		esac
	fi
	echo -ne $blue"  * "$default
	echo "$RULES"
}
